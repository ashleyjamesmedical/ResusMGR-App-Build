#!/usr/bin/env node

/**
 * ResusMGR Production APK Builder
 * Builds production-ready APK that loads https://www.resusmgr.co.uk/home
 */

import fs from 'fs';
import path from 'path';

const APP_CONFIG = {
  name: 'ResusMGR',
  package: 'com.ashleyjamesmedical.resusmgr',
  version: '1.3.0',
  versionCode: 4,
  url: 'https://www.resusmgr.co.uk/home',
  domain: 'www.resusmgr.co.uk',
  minSdk: 24,
  targetSdk: 34
};

const PROJECT_DIR = 'resusmgr-production';

console.log('Building ResusMGR Production APK...');

// Clean and create project structure
if (fs.existsSync(PROJECT_DIR)) {
  fs.rmSync(PROJECT_DIR, { recursive: true });
}

const dirs = [
  PROJECT_DIR,
  `${PROJECT_DIR}/app`,
  `${PROJECT_DIR}/app/src/main`,
  `${PROJECT_DIR}/app/src/main/java/com/ashleyjamesmedical/resusmgr`,
  `${PROJECT_DIR}/app/src/main/res/layout`,
  `${PROJECT_DIR}/app/src/main/res/values`,
  `${PROJECT_DIR}/app/src/main/res/drawable`,
  `${PROJECT_DIR}/app/src/main/res/mipmap-mdpi`,
  `${PROJECT_DIR}/app/src/main/res/mipmap-hdpi`,
  `${PROJECT_DIR}/app/src/main/res/mipmap-xhdpi`,
  `${PROJECT_DIR}/app/src/main/res/mipmap-xxhdpi`,
  `${PROJECT_DIR}/app/src/main/res/mipmap-xxxhdpi`,
  `${PROJECT_DIR}/app/src/main/res/xml`
];

dirs.forEach(dir => fs.mkdirSync(dir, { recursive: true }));

function writeFile(filePath, content) {
  fs.writeFileSync(filePath, content.trim());
  console.log(`Created: ${filePath}`);
}

// Root build.gradle
writeFile(`${PROJECT_DIR}/build.gradle`, `
buildscript {
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:8.1.2'
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
`);

// App build.gradle
writeFile(`${PROJECT_DIR}/app/build.gradle`, `
plugins {
    id 'com.android.application'
}

android {
    namespace '${APP_CONFIG.package}'
    compileSdk ${APP_CONFIG.targetSdk}

    defaultConfig {
        applicationId "${APP_CONFIG.package}"
        minSdk ${APP_CONFIG.minSdk}
        targetSdk ${APP_CONFIG.targetSdk}
        versionCode ${APP_CONFIG.versionCode}
        versionName "${APP_CONFIG.version}"
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.10.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
}
`);

// AndroidManifest.xml
writeFile(`${PROJECT_DIR}/app/src/main/AndroidManifest.xml`, `
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android">

    <uses-permission android:name="android.permission.INTERNET" />
    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
    <uses-permission android:name="android.permission.CAMERA" />
    <uses-permission android:name="android.permission.RECORD_AUDIO" />
    <uses-permission android:name="android.permission.WAKE_LOCK" />

    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:theme="@style/AppTheme"
        android:usesCleartextTraffic="false">

        <activity
            android:name=".MainActivity"
            android:exported="true"
            android:theme="@style/AppTheme"
            android:screenOrientation="portrait">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
            
            <intent-filter android:autoVerify="true">
                <action android:name="android.intent.action.VIEW" />
                <category android:name="android.intent.category.DEFAULT" />
                <category android:name="android.intent.category.BROWSABLE" />
                <data android:scheme="https" android:host="${APP_CONFIG.domain}" />
            </intent-filter>
        </activity>

        <meta-data android:name="asset_statements" android:value="@string/asset_statements" />

    </application>
</manifest>
`);

// MainActivity.java
writeFile(`${PROJECT_DIR}/app/src/main/java/com/ashleyjamesmedical/resusmgr/MainActivity.java`, `
package com.ashleyjamesmedical.resusmgr;

import android.annotation.SuppressLint;
import android.graphics.Bitmap;
import android.os.Bundle;
import android.view.View;
import android.webkit.WebChromeClient;
import android.webkit.WebSettings;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import android.webkit.PermissionRequest;
import android.widget.ProgressBar;
import androidx.appcompat.app.AppCompatActivity;
import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;

public class MainActivity extends AppCompatActivity {

    private WebView webView;
    private ProgressBar progressBar;
    private SwipeRefreshLayout swipeRefresh;
    private static final String RESUSMGR_URL = "${APP_CONFIG.url}";

    @SuppressLint("SetJavaScriptEnabled")
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        webView = findViewById(R.id.webview);
        progressBar = findViewById(R.id.progress_bar);
        swipeRefresh = findViewById(R.id.swipe_refresh);

        setupWebView();
        setupSwipeRefresh();
        
        webView.loadUrl(RESUSMGR_URL);
    }

    private void setupWebView() {
        WebSettings settings = webView.getSettings();
        settings.setJavaScriptEnabled(true);
        settings.setDomStorageEnabled(true);
        settings.setDatabaseEnabled(true);
        settings.setAppCacheEnabled(true);
        settings.setAllowFileAccess(true);
        settings.setAllowContentAccess(true);
        settings.setMixedContentMode(WebSettings.MIXED_CONTENT_NEVER_ALLOW);
        settings.setLoadWithOverviewMode(true);
        settings.setUseWideViewPort(true);
        settings.setCacheMode(WebSettings.LOAD_DEFAULT);
        settings.setMediaPlaybackRequiresUserGesture(false);

        webView.setWebViewClient(new WebViewClient() {
            @Override
            public boolean shouldOverrideUrlLoading(WebView view, String url) {
                if (url.contains("${APP_CONFIG.domain}")) {
                    view.loadUrl(url);
                    return true;
                }
                return super.shouldOverrideUrlLoading(view, url);
            }

            @Override
            public void onPageStarted(WebView view, String url, Bitmap favicon) {
                super.onPageStarted(view, url, favicon);
                progressBar.setVisibility(View.VISIBLE);
            }

            @Override
            public void onPageFinished(WebView view, String url) {
                super.onPageFinished(view, url);
                progressBar.setVisibility(View.GONE);
                swipeRefresh.setRefreshing(false);
            }
        });

        webView.setWebChromeClient(new WebChromeClient() {
            @Override
            public void onProgressChanged(WebView view, int newProgress) {
                super.onProgressChanged(view, newProgress);
                progressBar.setProgress(newProgress);
            }

            @Override
            public void onPermissionRequest(PermissionRequest request) {
                request.grant(request.getResources());
            }
        });
    }

    private void setupSwipeRefresh() {
        swipeRefresh.setOnRefreshListener(() -> webView.reload());
        swipeRefresh.setColorSchemeResources(R.color.colorPrimary);
    }

    @Override
    public void onBackPressed() {
        if (webView.canGoBack()) {
            webView.goBack();
        } else {
            super.onBackPressed();
        }
    }

    @Override
    protected void onPause() {
        super.onPause();
        webView.onPause();
    }

    @Override
    protected void onResume() {
        super.onResume();
        webView.onResume();
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        webView.destroy();
    }
}
`);

// Layout
writeFile(`${PROJECT_DIR}/app/src/main/res/layout/activity_main.xml`, `
<?xml version="1.0" encoding="utf-8"?>
<androidx.swiperefreshlayout.widget.SwipeRefreshLayout 
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:id="@+id/swipe_refresh"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <RelativeLayout
        android:layout_width="match_parent"
        android:layout_height="match_parent">

        <WebView
            android:id="@+id/webview"
            android:layout_width="match_parent"
            android:layout_height="match_parent" />

        <ProgressBar
            android:id="@+id/progress_bar"
            style="?android:attr/progressBarStyleHorizontal"
            android:layout_width="match_parent"
            android:layout_height="4dp"
            android:layout_alignParentTop="true"
            android:progressTint="@color/colorPrimary"
            android:visibility="gone" />

    </RelativeLayout>

</androidx.swiperefreshlayout.widget.SwipeRefreshLayout>
`);

// Strings
writeFile(`${PROJECT_DIR}/app/src/main/res/values/strings.xml`, `
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="app_name">${APP_CONFIG.name}</string>
    <string name="asset_statements">
        [{
            "relation": ["delegate_permission/common.handle_all_urls"],
            "target": {
                "namespace": "web",
                "site": "https://${APP_CONFIG.domain}"
            }
        }]
    </string>
</resources>
`);

// Colors
writeFile(`${PROJECT_DIR}/app/src/main/res/values/colors.xml`, `
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <color name="colorPrimary">#2563EB</color>
    <color name="colorPrimaryDark">#1D4ED8</color>
    <color name="colorAccent">#7C3AED</color>
    <color name="colorSecondary">#DC2626</color>
    <color name="white">#FFFFFF</color>
    <color name="black">#000000</color>
</resources>
`);

// Styles
writeFile(`${PROJECT_DIR}/app/src/main/res/values/styles.xml`, `
<resources>
    <style name="AppTheme" parent="Theme.Material3.DayNight.NoActionBar">
        <item name="colorPrimary">@color/colorPrimary</item>
        <item name="colorPrimaryDark">@color/colorPrimaryDark</item>
        <item name="colorAccent">@color/colorAccent</item>
        <item name="android:statusBarColor">@color/colorPrimary</item>
        <item name="android:navigationBarColor">@color/colorPrimary</item>
    </style>
</resources>
`);

// ResusMGR Icon
writeFile(`${PROJECT_DIR}/app/src/main/res/drawable/ic_launcher_foreground.xml`, `
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="108"
    android:viewportHeight="108">
    
    <!-- Medical gradient background -->
    <group>
        <path android:fillColor="#2563EB"
            android:pathData="M54,54m-48,0a48,48 0,1 1,96 0a48,48 0,1 1,-96 0"/>
        <path android:fillColor="#7C3AED"
            android:pathData="M54,54m-36,0a36,36 0,1 1,72 0a36,36 0,1 1,-72 0"/>
        <path android:fillColor="#DC2626"
            android:pathData="M54,54m-24,0a24,24 0,1 1,48 0a24,24 0,1 1,-48 0"/>
    </group>
    
    <!-- Heart icon -->
    <path android:fillColor="#FFFFFF"
        android:pathData="M54,76L47.4,70C36.9,60.5 29.7,54.2 29.7,46.5C29.7,40.5 34.5,35.7 40.5,35.7C43.8,35.7 47.1,37.4 54,40.5C60.9,37.4 64.2,35.7 67.5,35.7C73.5,35.7 78.3,40.5 78.3,46.5C78.3,54.2 71.1,60.5 60.6,70L54,76Z"/>
</vector>
`);

// Adaptive icons for all densities
const adaptiveIcon = `
<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@color/colorPrimary"/>
    <foreground android:drawable="@drawable/ic_launcher_foreground"/>
</adaptive-icon>
`;

['mdpi', 'hdpi', 'xhdpi', 'xxhdpi', 'xxxhdpi'].forEach(density => {
  writeFile(`${PROJECT_DIR}/app/src/main/res/mipmap-${density}/ic_launcher.xml`, adaptiveIcon);
});

// ProGuard rules
writeFile(`${PROJECT_DIR}/app/proguard-rules.pro`, `
-keepclassmembers class * {
    @android.webkit.JavascriptInterface <methods>;
}
-keep class android.webkit.** { *; }
-keep class ${APP_CONFIG.package}.** { *; }
`);

// Gradle properties
writeFile(`${PROJECT_DIR}/gradle.properties`, `
android.useAndroidX=true
android.enableJetifier=true
org.gradle.jvmargs=-Xmx2048m
`);

// Settings
writeFile(`${PROJECT_DIR}/settings.gradle`, `
include ':app'
rootProject.name = "${APP_CONFIG.name}"
`);

// Build script
writeFile(`${PROJECT_DIR}/build.sh`, `
#!/bin/bash
echo "Building ResusMGR APK..."
./gradlew clean
./gradlew assembleRelease
echo "APK built: app/build/outputs/apk/release/app-release.apk"
`);

// Windows build script
writeFile(`${PROJECT_DIR}/build.bat`, `
@echo off
echo Building ResusMGR APK...
gradlew.bat clean
gradlew.bat assembleRelease
echo APK built: app\\build\\outputs\\apk\\release\\app-release.apk
pause
`);

// README
writeFile(`${PROJECT_DIR}/README.md`, `
# ResusMGR Production APK

## Configuration
- **App URL**: ${APP_CONFIG.url}
- **Package**: ${APP_CONFIG.package}
- **Version**: ${APP_CONFIG.version} (${APP_CONFIG.versionCode})

## Build Instructions

### Android Studio
1. Open this folder in Android Studio
2. Wait for sync to complete
3. Build > Generate Signed Bundle/APK
4. Choose APK and follow signing steps

### Command Line
\`\`\`bash
# Linux/Mac
chmod +x build.sh
./build.sh

# Windows
build.bat
\`\`\`

### Manual Build
\`\`\`bash
./gradlew assembleRelease
\`\`\`

## Output
APK will be created at: \`app/build/outputs/apk/release/app-release.apk\`

## Features
- Official ResusMGR icon with medical gradient
- Loads ${APP_CONFIG.url} directly
- Optimized WebView with offline support
- Swipe-to-refresh functionality
- Domain verification for deep linking
- Production-ready with ProGuard optimization

## Testing
1. Install APK on Android device
2. Verify app opens to ResusMGR homepage
3. Test all medical protocol features
4. Verify offline functionality
5. Test swipe-to-refresh

Ready for Google Play Store submission.
`);

console.log('\nResusMGR Production APK project created successfully!');
console.log(`Project directory: ${PROJECT_DIR}/`);
console.log(`App will load: ${APP_CONFIG.url}`);
console.log('\nTo build:');
console.log(`cd ${PROJECT_DIR}`);
console.log('./gradlew assembleRelease');
console.log('\nFeatures included:');
console.log('- Official ResusMGR medical gradient icon');
console.log('- Optimized WebView for emergency use');
console.log('- Production-ready configuration');
console.log('- Domain verification and deep linking');
